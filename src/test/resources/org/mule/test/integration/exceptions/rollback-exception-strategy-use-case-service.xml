<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:jms="http://www.mulesoft.org/schema/mule/jms"
      xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:https="http://www.mulesoft.org/schema/mule/https"
      xmlns:test="http://www.mulesoft.org/schema/mule/test"
      xmlns:tcp="http://www.mulesoft.org/schema/mule/tcp"
      xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf"
      xmlns:json="http://www.mulesoft.org/schema/mule/json"
      xsi:schemaLocation="
       http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/3.2/mule.xsd
       http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/3.2/mule-test.xsd
       http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/3.2/mule-jms.xsd
       http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/3.2/mule-vm.xsd
       http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/3.2/mule-http.xsd
       http://www.mulesoft.org/schema/mule/https http://www.mulesoft.org/schema/mule/https/3.2/mule-https.xsd
       http://www.mulesoft.org/schema/mule/tcp http://www.mulesoft.org/schema/mule/tcp/3.2/mule-tcp.xsd
       http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/3.2/mule-cxf.xsd
       http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/3.2/mule-json.xsd">

    <https:connector name="httpsConnector">
        <https:tls-client path="clientKeystore" storePassword="mulepassword"/>
        <https:tls-key-store path="serverKeystore" keyPassword="mulepassword" storePassword="mulepassword"/>
        <https:tls-server path="trustStore" storePassword="mulepassword"/>
    </https:connector>

    <jms:activemq-connector name="activeMq" maxRedelivery="-1"/>
    <jms:activemq-connector name="activeMqRedelivery" maxRedelivery="${maxRedelivery}"/>


    <model>
        <service name="alwaysRollback">
            <inbound>
                <vm:inbound-endpoint path="in">
                    <vm:transaction action="ALWAYS_BEGIN"/>
                </vm:inbound-endpoint>
            </inbound>
            <test:component throwException="true"/>
            <rollback-exception-strategy/>
            <threading-profile doThreading="false"/>
        </service>

        <service name="alwaysRollbackJmsNoTransaction">
            <inbound>
                <jms:inbound-endpoint queue="in" connector-ref="activeMq"/>
            </inbound>
            <test:component throwException="true"/>
            <rollback-exception-strategy/>
            <threading-profile doThreading="false"/>
        </service>

        <service name="redeliveryExhaustedTransactional">
            <inbound>
                <jms:inbound-endpoint queue="in2" connector-ref="activeMqRedelivery">
                    <jms:transaction action="ALWAYS_BEGIN"/>
                </jms:inbound-endpoint>
            </inbound>
            <test:component throwException="true"/>
            <rollback-exception-strategy>
                <on-redelivery-attempts-exceeded>
                    <jms:jmsmessage-to-object-transformer/>
                    <append-string-transformer message=" consumed successfully"/>
                    <jms:outbound-endpoint queue="dlq" connector-ref="activeMqRedelivery">
                        <jms:transaction action="ALWAYS_JOIN"/>
                    </jms:outbound-endpoint>
                </on-redelivery-attempts-exceeded>
            </rollback-exception-strategy>
            <threading-profile doThreading="false"/>
        </service>

        <service name="redeliveryExhaustedNoTransaction">
            <inbound>
                <jms:inbound-endpoint queue="in3" connector-ref="activeMq"/>
            </inbound>
            <test:component throwException="true"/>
            <rollback-exception-strategy maxRedeliveryAttempts="${maxRedelivery}">
                <on-redelivery-attempts-exceeded>
                    <append-string-transformer message=" consumed successfully"/>
                    <jms:outbound-endpoint queue="dlq" connector-ref="activeMqRedelivery"/>
                </on-redelivery-attempts-exceeded>
            </rollback-exception-strategy>
            <threading-profile doThreading="false"/>
        </service>

        <service name="httpRollbackOnly">
            <inbound>
                <http:inbound-endpoint host="localhost" port="${port1}"/>
            </inbound>
            <test:component throwException="true"/>
            <rollback-exception-strategy/>
            <threading-profile doThreading="false"/>
        </service>

        <service name="httpWithRedeliveryExhausted">
            <inbound>
                <http:inbound-endpoint host="localhost" port="${port2}"/>
            </inbound>
            <test:component throwException="true"/>
            <rollback-exception-strategy maxRedeliveryAttempts="${shortMaxRedelivery}">
                <on-redelivery-attempts-exceeded>
                    <append-string-transformer message=" consumed successfully"/>
                </on-redelivery-attempts-exceeded>
            </rollback-exception-strategy>
            <threading-profile doThreading="false"/>
        </service>

        <service name="fullyDefinedRollbackExceptionStrategy">
            <inbound>
                <vm:inbound-endpoint path="in2" exchange-pattern="request-response"/>
                <append-string-transformer message=" apt1"/>
            </inbound>
            <test:component throwException="true"/>
            <rollback-exception-strategy maxRedeliveryAttempts="${shortMaxRedelivery}">
                <append-string-transformer message=" apt2"/>
                <append-string-transformer message=" apt3"/>
                <on-redelivery-attempts-exceeded>
                    <append-string-transformer message=" apt4"/>
                    <append-string-transformer message=" apt5"/>
                </on-redelivery-attempts-exceeded>
            </rollback-exception-strategy>
            <threading-profile doThreading="false"/>
        </service>

        <service name="redeliveryPolicyRedefinition">
            <inbound>
                <vm:inbound-endpoint path="in3">
                    <idempotent-redelivery-policy idExpression="#[payload:]" useSecureHash="false"/>
                    <vm:transaction action="ALWAYS_BEGIN"/>
                </vm:inbound-endpoint>
            </inbound>
            <test:component throwException="true"/>
            <rollback-exception-strategy/>
            <threading-profile doThreading="false"/>
        </service>

        <service name="inboundEndpointMaxRedeliveryTakesPrecendence">
            <inbound>
                <vm:inbound-endpoint path="in4">
                    <idempotent-redelivery-policy maxRedeliveryCount="4"/>
                    <vm:transaction action="ALWAYS_BEGIN"/>
                </vm:inbound-endpoint>
            </inbound>
            <test:component throwException="true"/>
            <rollback-exception-strategy maxRedeliveryAttempts="7"/>
            <threading-profile doThreading="false"/>
        </service>
    </model>


</mule>
