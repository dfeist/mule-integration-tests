<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesource.org/schema/mule/core/2.0"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:mule="http://www.mulesource.org/schema/mule/core/2.0"
      xmlns:spring="http://www.springframework.org/schema/beans"
      xmlns:vm="http://www.mulesource.org/schema/mule/vm/2.0"
      xmlns:test="http://www.mulesource.org/schema/mule/test/2.0"
      xmlns:script="http://www.mulesource.org/schema/mule/scripting/2.0"
      xmlns:jms="http://www.mulesource.org/schema/mule/jms/2.0"
      xsi:schemaLocation="
       http://www.mulesource.org/schema/mule/jms/2.0 http://www.mulesource.org/schema/mule/jms/2.0/mule-jms.xsd
       http://www.mulesource.org/schema/mule/scripting/2.0 http://www.mulesource.org/schema/mule/scripting/2.0/mule-scripting.xsd
       http://www.mulesource.org/schema/mule/test/2.0 http://www.mulesource.org/schema/mule/test/2.0/mule-test.xsd
       http://www.mulesource.org/schema/mule/vm/2.0 http://www.mulesource.org/schema/mule/vm/2.0/mule-vm.xsd
       http://www.mulesource.org/schema/mule/core/2.0 http://www.mulesource.org/schema/mule/core/2.0/mule.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

    <!--// START SNIPPET: full-config -->
    <description>
        Receives a message from another party and processes the message. Then the message is sent to another service (or
        application) for processing. A Reply-To endpoint is attached to the message and this is used by the second
        service to return a result. Note that if the external service is not a Mule instance the protocol being used
        will need to have the notion of a back channel or reply-to destination, i.e. JMS, WS-Addressing, Socket-based
        protocols.
    </description>

    <jms:activemq-connector name="jmsConnector"/>

    <vm:endpoint path="test.inbound" name="inboundEndpoint" synchronous="true"/>
    <jms:endpoint queue="test.external.app" name="externalEndpoint" synchronous="false"/>
    <jms:endpoint queue="test.reply" name="replyEndpoint" synchronous="false"/>

    <model>
        <service name="In-Out_Out-Only-Async-Service">
            <inbound>
                <inbound-endpoint ref="inboundEndpoint"/>
            </inbound>
            <script:component>
                <script:script engine="groovy">
                    message.setProperty("foo", "bar")
                    return message
                </script:script>
            </script:component>

            <outbound>
                <filtering-router>
                    <outbound-endpoint ref="externalEndpoint"/>
                    <reply-to ref="replyEndpoint"/>
                </filtering-router>
            </outbound>

            <async-reply failOnTimeout="true" timeout="4000">
                <inbound-endpoint ref="replyEndpoint"/>
                <single-async-reply-router/>
            </async-reply>

        </service>

        <service name="ExternalApp">
            <inbound>
                <inbound-endpoint ref="externalEndpoint"/>
            </inbound>
            <test:component>
                <test:return-data>got it!</test:return-data>
            </test:component>
        </service>
    </model>
    <!--// END SNIPPET: full-config -->
</mule>