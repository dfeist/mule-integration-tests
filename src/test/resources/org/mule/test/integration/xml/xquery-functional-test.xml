<?xml version="1.0" encoding="UTF-8"?>
<!--// START SNIPPET: full-config -->
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:mxml="http://www.mulesoft.org/schema/mule/xml"
      xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
      xmlns:stdio="http://www.mulesoft.org/schema/mule/stdio"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="
      http://www.mulesoft.org/schema/mule/stdio http://www.mulesoft.org/schema/mule/stdio/3.2/mule-stdio.xsd
      http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/3.2/mule-vm.xsd
      http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/3.2/mule-xml.xsd
       http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/3.2/mule.xsd">

<!--// START SNIPPET: transformer-config -->
    <mxml:xquery-transformer name="xquery">
        <mxml:context-property key="title" value="#[mule:message.header(ListTitle)]"/>
        <mxml:context-property key="rating" value="#[mule:message.header(ListRating)]"/>

        <mxml:xquery-text>
           <![CDATA[
                declare variable $document external;
                declare variable $title external;
                declare variable $rating external;

                <cd-listings title='{$title}' rating='{$rating}'> {
                    for $cd in $document/catalog/cd
                    return <cd-title>{data($cd/title)}</cd-title>
                } </cd-listings>
            ]]>
        </mxml:xquery-text>
    </mxml:xquery-transformer>
<!--// END SNIPPET: transformer-config -->

    <model name="main">
    <service name="Echo">
        <inbound>
            <!-- this endpoint is used by the functional test -->
            <vm:inbound-endpoint path="test.in" exchange-pattern="request-response" 
                transformer-refs="xquery"/>
        </inbound>

        <echo-component/>

        <outbound>
            <multicasting-router>
                <vm:outbound-endpoint path="test.out" exchange-pattern="one-way"/>
                <stdio:outbound-endpoint system="OUT" exchange-pattern="one-way"/>
            </multicasting-router>
        </outbound>
    </service>
    </model>

</mule>
<!--// END SNIPPET: full-config -->
